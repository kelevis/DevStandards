{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// 代码类，键盘输入".c"开头，代表code
	"file header for python2": {
		"prefix": ".cHeader2",
		"body": [
			"#!/usr/bin/env python2",
			"# -*- coding: UTF-8 -*-",
			"",
			"$0"
		],
		"description": "add header for python2"
	},
	"file header for python3": {
		"prefix": ".cHeader3",
		"body": [
			"#!/usr/bin/env python3",
			"# -*- coding: UTF-8 -*-",
			"",
			"$0"
		],
		"description": "add header for python3"
	},
	"add module common var": {
		"prefix": ".cModule/var",
		"body": [
			"__MOUDLE__ = '$TM_FILENAME_BASE'  # 模块名",
			"__DESCRIPT__ = '$1'  # 模块描述",
			"__VERSION__ = '{\\$VERSION$}'  # 版本",
			"__AUTHOR__ = '{\\$AUTHOR$}'  # 作者",
			"__PUBLISH__ = '${CURRENT_YEAR}.${CURRENT_MONTH}.${CURRENT_DATE}'  # 发布日期",
		],
		"description": "添加模块公共信息变量"
	},
	"add run print common": {
		"prefix": ".cRun/print",
		"body": [
			"if __name__ == '__main__':",
			"\t# 当程序自己独立运行时执行的操作",
			"\t# 打印版本信息",
			"\tprint('''模块名：%s  -  %s",
			"\t作者：%s",
			"\t发布日期：%s",
			"\t版本：%s''' % (__MOUDLE__, __DESCRIPT__, __AUTHOR__, __PUBLISH__, __AUTHOR__))",
			"\t$0"
		],
		"description": "添加通用打印的运行代码"
	},
	"add run main": {
		"prefix": ".cRun/main",
		"body": [
			"if __name__ == '__main__':",
			"\t# 当程序自己独立运行时执行的操作",
			"\t$0"
		],
		"description": "添加通用独立运行的代码"
	},
	"add class": {
		"prefix": ".cClass",
		"body": [
			"class ${1:name}(${2:object}):",
			"\t$3"
		],
		"description": "新增类"
	},
	"add enum": {
		"prefix": ".cEnum",
		"body": [
			"class ${1:name}(Enum):",
			"\t$2"
		],
		"description": "新增枚举对象"
	},
	"add property read": {
		"prefix": ".cprop/read",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"\treturn ${2:value}"
		],
		"description": "增加只读属性"
	},
	"add property read/write": {
		"prefix": ".cprop/rw",
		"body": [
			"@property",
			"def ${1:name}(self):",
			"\treturn ${2:value}",
			"\t",
			"@${3:name}.setter",
			"def ${4:name}(self, value):",
			"\tpass",
			"\t$0"
		],
		"description": "增加读写属性"
	},
	"add property write": {
		"prefix": ".cprop/write",
		"body": [
			"@${1:name}.setter",
			"def ${2:name}(self, value):",
			"\tpass",
			"\t$0"
		],
		"description": "增加写属性"
	},
	"add property delete": {
		"prefix": ".cprop/delete",
		"body": [
			"@${1:name}.deleter",
			"def ${2:name}(self, value):",
			"\tpass",
			"\t$0"
		],
		"description": "增加写属性"
	},
	// 注释部分,键盘输入".n"开头，代表node
	"add note todo": {
		"prefix": ".nTodo",
		"body": [
			"# TODO(${1:{\\$AUTHOR$\\}}): ${2:Todo Descript}",
			"\t$0"
		],
		"description": "TODO注释"
	},
	"add note fixme": {
		"prefix": ".nFixme",
		"body": [
			"# FIXME(${1:{\\$AUTHOR$\\}}): ${2:Fixme Descript}",
			"\t$0"
		],
		"description": "FIXME注释"
	},
	"add note typedef": {
		"prefix": ".nTypedef",
		"body": [
			"\"\"\"",
			"${1:<descript>}",
			"@typedef {(${2|number,int,float,bool,complex,string,list,tuple,set,dict,object,function|})\\} ${3:typename} - ${4:[type-descript]}",
			"\"\"\"",
			"$0"
		],
		"description": "@typedef注释"
	}
}